"""The template for future perturbation versions.
Update this docstring with information about the version"""
import numpy as np
from typing import Any, Dict, Union

from srf_generation.source_parameter_generation.uncertainties.common import (
    verify_params,
    GCMT_Source,
    NHM_Source,
)
from srf_generation.source_parameter_generation.uncertainties.mag_scaling import (
    mw_2_a_scaling_relation,
    MagnitudeScalingRelations,
    mag2mom,
)


def generate_source_params(
    source_data: Union[GCMT_Source, NHM_Source]
) -> Dict[str, Any]:
    """source_data should have the following parameters available via . notation:
      - source_data.pid: name of the event
      - source_data.lat: latitude
      - source_data.lon: longitude
      - source_data.depth: depth
      - source_data.mag: magnitude
      - source_data.strike
      - source_data.dip
      - source_data.rake
    """

    ### Start of custom code area

    if isinstance(source_data, GCMT_Source):
        params = generate_from_gcmt(source_data)
    elif isinstance(source_data, NHM_Source):
        params = generate_from_nhm(source_data)
    else:
        raise ValueError("Not a valid type")

    ### End of custom code area

    verify_params(params)
    return params


def generate_from_gcmt(sources_line: GCMT_Source):

    params = {
        "type": 1,
        "name": sources_line.pid,
        "latitude": sources_line.lat,
        "longitude": sources_line.lon,
        "depth": sources_line.depth,
        "magnitude": sources_line.mag,
        "moment": float(mag2mom(sources_line.mag)),
        "strike": sources_line.strike,
        "dip": sources_line.dip,
        "rake": sources_line.rake,
    }
    return params


def generate_from_nhm(source: NHM_Source):
    return None
