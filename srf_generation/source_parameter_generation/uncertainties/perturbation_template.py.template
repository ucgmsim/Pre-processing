"""The template for future perturbation versions.
Update this docstring with information about the version"""
import pandas as pd
from typing import Any, Dict, Union, Optional

from qcore.nhm import NHMFault

from srf_generation.source_parameter_generation.uncertainties.common import (
    verify_realisation_params,
    GCMT_Source,
)
from srf_generation.source_parameter_generation.uncertainties.mag_scaling import (
    mw_2_lw_scaling_relation,
    MagnitudeScalingRelations,
    mag2mom,
)


def verify_1d_vel_mod(vel_mod_1d: pd.DataFrame):
    for line in vel_mod_1d.itertuples():
        assert line._fields == ('depth', 'vp', 'vs', 'rho', 'qp', 'qs')


def generate_source_params(
    source_data: Union[GCMT_Source, NHMFault],
    additional_source_parameters: Dict[str, Any],
    vel_mod_1d: Optional[pd.DataFrame] = None,
    hf_vel_mod_1d: Optional[pd.DataFrame] = None,
    vs30_data: Optional[pd.DataFrame] = None,
    **kwargs,
) -> Dict[str, Any]:
    """
    Generates the parameters for a single realisation.
    The dataframes vel_mod_1d, hf_vel_mod_1d and vs30_data are guaranteed to be editable without changing the original
    dataframe
    :param source_data: The source data from the input cmt or nhm data
    :param additional_source_parameters: Any extra parameters passed in by the user
    :param vel_mod_1d: The 1d velocity model to use for srf generation
    :param hf_vel_mod_1d: The 1d velocity model to use for the HF computation step
    :param vs30_data: The station vs30 data to use. Contains median and sigma columns. This dataframe should have a
    vs30 column added, containing the realised data
    :param kwargs: Catches any named arguments added in the future
    :return:
    """

    realisation = kwargs
    # Start of custom code area

    if isinstance(source_data, GCMT_Source):
        realisation["params"] = generate_from_gcmt(source_data, additional_source_parameters)
    elif isinstance(source_data, NHMFault):
        realisation["params"] = generate_from_nhm(source_data, additional_source_parameters)
    else:
        raise ValueError("Not a valid type")

    if vel_mod_1d is not None:
        realisation["vel_mod_1d"] = vel_mod_1d

    # End of custom code area
    verify_realisation_params(realisation["params"])

    if vel_mod_1d is not None:
        verify_1d_vel_mod(realisation["vel_mod_1d"])

    return realisation


def generate_from_gcmt(
    sources_line: GCMT_Source, additional_source_parameters: Dict[str, Any]
):

    params = {
        "type": 1,
        "name": sources_line.pid,
        "latitude": sources_line.lat,
        "longitude": sources_line.lon,
        "depth": sources_line.depth,
        "magnitude": sources_line.mag,
        "moment": float(mag2mom(sources_line.mag)),
        "strike": sources_line.strike,
        "dip": sources_line.dip,
        "rake": sources_line.rake,
    }
    params.update(additional_source_parameters)
    return params


def generate_from_nhm(source: NHMFault, additional_source_parameters: Dict[str, Any]):
    return None
